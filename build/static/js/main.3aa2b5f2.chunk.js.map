{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["override","css","App","props","names","gunluk_vaka","gunluk_hasta","gunluk_vefat","gunluk_test","gunluk_iyilesen","checkboxes","datatoget","localStorage","getItem","split","reduce","a","b","indexOf","push","state","button","data","buttonStyle","options","showLoader","changeData","stroke","curve","width","xaxis","categories","map","i","series","j","name","parseInt","join","setState","chart","className","type","getFullData","axios","get","console","log","res","reverse","handleChange","checked","concat","temp","splice","clear","setItem","this","rel","target","href","style","onClick","pointerEvents","margin","id","onChange","e","htmlFor","loading","color","size","document","querySelector","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3aa2b5f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport \"mini.css/dist/mini-default.min.css\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { css } from \"@emotion/react\";\r\nimport Loader from \"react-spinners/PuffLoader\";\r\n\r\nconst override = css`\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n`;\r\n\r\nexport class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.names = {\r\n            gunluk_vaka: \"Günlük vaka\",\r\n            gunluk_hasta: \"Günlük hasta\",\r\n            gunluk_vefat: \"Günlük vefat\",\r\n            gunluk_test: \"Günlük test\",\r\n            gunluk_iyilesen: \"Günlük iyileşen\",\r\n        };\r\n        this.checkboxes = [\r\n            \"gunluk_vaka\",\r\n            \"gunluk_hasta\",\r\n            \"gunluk_vefat\",\r\n            \"gunluk_test\",\r\n            \"gunluk_iyilesen\",\r\n        ];\r\n\r\n        this.datatoget = localStorage.getItem(\"datatoget\")\r\n            ? localStorage\r\n                  .getItem(\"datatoget\")\r\n                  .split(\" \")\r\n                  .reduce(function (a, b) {\r\n                      if (a.indexOf(b) < 0) a.push(b);\r\n                      return a;\r\n                  }, [])\r\n            : [];\r\n\r\n        this.state = {\r\n            button: \"Grafiği yenile\",\r\n            data: [],\r\n            buttonStyle: {},\r\n            options: null,\r\n            showLoader: true,\r\n        };\r\n        this.changeData = async () => {\r\n            const options = {\r\n                stroke: {\r\n                    curve: \"smooth\",\r\n                    width: 3,\r\n                },\r\n                xaxis: {\r\n                    categories: this.state.data.map((i) => i[\"tarih\"]),\r\n                },\r\n            };\r\n            const series = [];\r\n            for (const j of this.datatoget) {\r\n                series.push({\r\n                    name: this.names[j],\r\n                    data: this.state.data.map(\r\n                        (i) => parseInt(i[j].split(\".\").join(\"\")) || 0,\r\n                    ),\r\n                });\r\n            }\r\n\r\n            await this.setState({\r\n                chart: (\r\n                    <Chart\r\n                        className=\"chart\"\r\n                        options={options}\r\n                        series={series}\r\n                        type=\"line\"\r\n                    ></Chart>\r\n                ),\r\n            });\r\n        };\r\n        this.getFullData = async () => {\r\n            this.setState({ showLoader: true });\r\n            const data = await axios.get(\r\n                \"https://kovidbot.herokuapp.com/fulldatakoved/\",\r\n            );\r\n            console.log(data[\"data\"]);\r\n            const res = data[\"data\"].reverse();\r\n            this.setState({ data: res });\r\n            this.changeData();\r\n            this.setState({ showLoader: false });\r\n            return res;\r\n        };\r\n        this.handleChange = async (i, checked) => {\r\n            if (checked) {\r\n                this.datatoget = this.datatoget.concat(i);\r\n            } else {\r\n                const temp = this.datatoget;\r\n                temp.splice(temp.indexOf(i), 1);\r\n                this.datatoget = temp;\r\n            }\r\n            await localStorage.clear();\r\n            localStorage.setItem(\"datatoget\", this.datatoget.join(\" \"));\r\n            console.log(\r\n                localStorage.getItem(\"datatoget\"),\r\n                this.datatoget.join(\" \"),\r\n            );\r\n            await this.changeData();\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"header col-sm\">\r\n                        <a\r\n                            rel=\"noreferrer\"\r\n                            target=\"_blank\"\r\n                            href=\"https://t.me/kovidbot\"\r\n                            className=\"col-sm\"\r\n                        >\r\n                            @kovidbot\r\n                        </a>\r\n                        Türkiye Kovid19 Grafiği\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <button\r\n                            style={this.state.buttonStyle}\r\n                            className=\"primary large\"\r\n                            onClick={async () => {\r\n                                this.setState({\r\n                                    buttonStyle: {\r\n                                        pointerEvents: \"none\",\r\n                                    },\r\n                                });\r\n                                await this.getFullData();\r\n                                this.setState({\r\n                                    buttonStyle: { pointerEvents: \"all\" },\r\n                                });\r\n                            }}\r\n                        >\r\n                            {this.state.button}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"checkboxes\" style={{ margin: \"auto\" }}>\r\n                            {this.checkboxes.map((i) => {\r\n                                return (\r\n                                    <span className=\"checkbox\" key={i}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id={i}\r\n                                            onChange={(e) => {\r\n                                                this.handleChange(\r\n                                                    i,\r\n                                                    e.target.checked,\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                        <label htmlFor={i}>\r\n                                            {this.names[i]}\r\n                                        </label>\r\n                                    </span>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                {this.state.chart}\r\n                <Loader\r\n                    className=\"loading\"\r\n                    css={override}\r\n                    loading={this.state.showLoader}\r\n                    color=\"#008FFB\"\r\n                    size={150}\r\n                ></Loader>\r\n            </div>\r\n        );\r\n    }\r\n    async componentDidMount() {\r\n        for (const i of this.datatoget) {\r\n            document.querySelector(\"#\" + i).checked = true;\r\n            console.log(i);\r\n        }\r\n        this.getFullData();\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}